name: CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCE_INSTANCE: ${{ secrets.GCE_INSTANCE_NAME }}
  GCE_INSTANCE_ZONE: ${{ secrets.GCE_INSTANCE_ZONE }}
  REGISTRY: us-docker.pkg.dev
  REPOSITORY: docker-repo
  DOCKER_IMAGE: cars-project

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build Docker & Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat > .env << EOF
          DEBUG=False
          POSTGRES_DB=carros
          POSTGRES_USER=postgres
          SECRET_KEY=test-secret-key-for-ci
          ALLOWED_HOSTS=['localhost', '127.0.0.1']
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build

      - name: Start services
        run: |
          docker compose up -d
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Check container status
        run: |
          docker compose ps
          docker compose logs app

      - name: Wait for entrypoint to complete
        run: |
          echo "Entrypoint is running migrations and collectstatic..."
          sleep 10
          docker compose logs app | grep -i "starting gunicorn" || echo "Still initializing..."

      - name: Run tests
        run: |
          docker compose exec -T app python manage.py test || true

      - name: Check app health
        run: |
          docker compose exec -T app python manage.py check

      - name: Stop services
        if: always()
        run: |
          docker compose down -v

  # Job 2: Deploy to Google Cloud (apenas em push para main)
  deploy:
    name: Deploy to Google Cloud
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use gcloud (Artifact Registry)
        run: |
          gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Build and Push Docker image to GCR
        run: |
          docker build -t $REGISTRY/$PROJECT_ID/$REPOSITORY/$DOCKER_IMAGE:$GITHUB_SHA \
            -t $REGISTRY/$PROJECT_ID/$REPOSITORY/$DOCKER_IMAGE:latest .
          docker push $REGISTRY/$PROJECT_ID/$REPOSITORY/$DOCKER_IMAGE:$GITHUB_SHA
          docker push $REGISTRY/$PROJECT_ID/$REPOSITORY/$DOCKER_IMAGE:latest

      - name: Deploy to Google Compute Engine
        run: |
          gcloud compute ssh $GCE_INSTANCE \
            --zone=$GCE_INSTANCE_ZONE \
            --command='
              set -e
              
              echo "=== Setting up environment ==="
              sudo usermod -aG docker $USER 2>/dev/null || true
              
              echo "=== Setting up project directory ==="
              if [ -d /opt/cars-project/cars-project ]; then
                echo "Fixing nested directory structure..."
                sudo rm -rf /opt/cars-project-backup 2>/dev/null || true
                sudo mv /opt/cars-project /opt/cars-project-backup
                sudo mkdir -p /opt/cars-project
                sudo mv /opt/cars-project-backup/cars-project/* /opt/cars-project/
                sudo mv /opt/cars-project-backup/cars-project/.* /opt/cars-project/ 2>/dev/null || true
                sudo rm -rf /opt/cars-project-backup
              elif [ ! -d /opt/cars-project ]; then
                sudo mkdir -p /opt/cars-project
              fi
              
              sudo chown -R $USER:$USER /opt/cars-project
              
              echo "=== Updating repository ==="
              cd /opt/cars-project
              if [ -d .git ]; then
                git pull origin main
              else
                git clone https://github.com/iuri-medina/cars-project.git .
              fi
              
              echo "=== Configuring permissions ==="
              [ -f .env ] && sudo chmod 644 .env || echo "WARNING: No .env file found - application may not start correctly"
              
              echo "=== Authenticating with Artifact Registry ==="
              gcloud auth configure-docker us-docker.pkg.dev --quiet
              
              echo "=== Pulling latest image ==="
              sg docker -c "cd /opt/cars-project && docker pull '"$REGISTRY/$PROJECT_ID/$REPOSITORY/$DOCKER_IMAGE"':latest"
              
              echo "=== Stopping old containers ==="
              sg docker -c "cd /opt/cars-project && docker compose down" || true
              
              echo "=== Starting new containers ==="
              sg docker -c "cd /opt/cars-project && docker compose up -d"
              
              echo "=== Waiting for initialization ==="
              sleep 20
              
              echo "=== Verifying deployment ==="
              sg docker -c "cd /opt/cars-project && docker compose ps"
              
              echo "=== Cleaning up old images ==="
              sg docker -c "docker image prune -af --filter until=24h" || true
              
              echo "=== Deployment completed successfully ==="
            '

      - name: Verify deployment
        run: |
          gcloud compute ssh $GCE_INSTANCE \
            --zone=$GCE_INSTANCE_ZONE \
            --command='sg docker -c "cd /opt/cars-project && docker compose ps"'

      - name: Notify deployment success
        if: success()
        run: |
          echo "Deployment successful!"
          echo "Application deployed to GCP instance: $GCE_INSTANCE"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "Deployment failed!"
          exit 1
